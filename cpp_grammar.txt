class-name:
	identifier
enum-name:
	identifier
typedef-name:
	identifier

### Expression

expression:
	assignment-expression
	expression, assignment-expression
assignment-expression:
	conditional-expression
	unary-expression assignment-operator assignment-expression
assignment-operator: one of
	=   *=   /=   %=   +=   -=   >>=   <<=   &=   ^=   |=
conditional-expression:
	logical-or-expression
	logical-or-expression ? expression : conditional-expression
logical-or-expression:
	logical-and-expression
	logical-or-expression || logical-and-expression
logical-and-expression:
	inclusive-or-expression
	logical-and-expression && inclusive-or-expression
inclusive-or-expression:
	exclusive-or-expression
	inclusive-or-expression | exclusive-or-expression
exclusive-or-expression:
	and-expression
	exclusive-or-expression ^ and-expression
and-expression:
	equality-expression
	and-expression & equality-expression
equality-expression:
	relational-expression
	equality-expression == relational-expression
	equality-expression != relational-expression
relational-expression:
	shift-expression
	relational-expression < shift-expression
	relational-expression > shift-expression
	relational-expression <= shift-expression
    relational-expression >= shift-expression
shfit-expression:
	additive-expression
	shift-expression << additive-expression
	shift-expression >> additive-expression
additive-expression:
	multiplicative-expression
	additive-expression + multiplicative-expression
	additive-expression -  multiplicative-expression
multiplicative-expression:
	pm-expression
	multiplicative-expression * pm-expression
	multiplicative-expression / pm-expression
	multiplicative-expression % pm-expression
pm-expression:
	cast-expression
	pm-expression .* cast-expression
	pm-expression ->* cast-expression
cast-expression:
	unary-expression
	( type-name ) cast-expression
unary-expression:
	postfix-expression
	++ unary-expression
	--  unary-expression
	unary-operator cast-expression
	sizeof unary-expression
	sizeof ( type-name )
	allocation-expression
	deallocation-expression
unary-operator: one of

*  &   +   -   !   

allocation-expression:
    :: new placement new-type-name new-initializer
    :: new placement ( type-name ) new-initializer
new-type-name:
    type-specifier-list new-declarator
new-declarator:
    * cv-qualifier-list new-declarator
new-initializer:
    ( initializer-list )
deallocation-expression:
    :: delete cast-expression
    :: delete [  ] cast-expression
postfix-expression:
    primary-expression
    postfix-expression [ expression ]
    postfix-expression ( expression-list )
    simple-type-name ( expression-list )
    postfix-expression . name
    postfix-expression -> name
    postfix-expression ++
    postfix-expression --
primary-expression:
    literal
    this
    :: identifier
    :: operator-function-name
    :: qualifier-name
    ( expression )
    name
name:
    identifier
    operator-function-name
    conversion-function-name
    ~ class-name
    qualified-name
qualified-name:
    qualified-class-name :: name
literal:
    integer-constant
    character-constant
    floating-constant
    string-literal

### Declarations

declaration:
    decl-specifier declarator-list ;
    asm-declaration
    function-definition
    template-declaration
    linkage-specification
decl-specifier:
    storate-class-specifier
    type-specifier
    fct-specifier
    friend
    typedef
decl-specifiers:
    decl-specifiers decl-specifier
storage-class-specifier:
    auto
    register
    static
    extern
fct-specifier:
    inline
    virtual
type-specifier:
    simple-type-name
    class-specifier
    enum-specifier
    elaborated-type-specifier
    constant
    volatile
simple-type-name:
    complete-class-name
    qualified-type-name
    character
    short
    int
    long
    signed
    unsigned
    float
    double
    void
elaborated-type-specifier:
    class-key identifier
    class-key class-name
    enum enum-name
class-key:
    class
    struct
    union
qualified-type-name:
    typedef-name
    class-name :: qualified-type-name
complete-class-name:
    qualified-class-name
    :: qualified-class-name
qualified-class-name:
    class-name
    class-name :: qualified-class-name
enum-specifier:
    enum identifier { enum-list }
enum-list:
    enumerator
    enum-list , enumerator
enumerator:
    identifier
    identifier = constant-expression
constant-expression:
    conditional-expression
linkage-specification:
    extern string-literal { declaration-list }
    extern string-literal declaration
declaration-list:
    declaration
    declaration-list declaration
asm-declaration:
    asm ( string-literal ) ;

### Declarators

declarator-list:
    init-declarator
    declarator-list , init-declarator
init-declarator:
    declarator initializer
declarator:
    dname
    ptr-operator declarator
    declarator ( argument-declaration-list ) cv-qualifier-list
    declarator [ constant-expression ]
    ( declarator )
ptr-operator:
    * cv-qualifier-list
    & cv-qualifier-list
    complete-class-name :: * cv-qualifier-list
cv-qualifier-list:
    cv-qualifier cv-qualifier-list
cv-qualifier:
    const
    volatile
dname:
    name
    class-name
    ~ class-name
    typedef-name
    qualified-type-name
type-name:
    type-specifier-list abstract-declarator
type-specifier-list:
    type-specifier type-specifier-list
abstract-declarator:
    ptr-operator abstract-declarator
    abstract-declarator ( argument-declaration-list ) cv-qualifier-list
    abstract-declarator [ constant-expression ]
    ( abstract-declarator )
argument-declaration-list:
    arg-declaration-list ...
    arg-declaration-list , ...
arg-declaration-list:
    argument-declaration
    arg-declaration-list , argument-declaration
argument-declaration:
    decl-specifiers declarator
    decl-specifiers declarator = expression
    decl-specifiers abstract-declarator
    decl-specifiers abstract-declarator = expression
function-definition:
    decl-specifiers declarator ctor-initializer fct-body
fct-body:
    compound-statement
initializer:
    = assignment-expression
    = { initializer-list ,}
    { expression-list }
initializer-list:
    assignment-expression
    initializer-list , assignment-expression
    { initializer-list , }


### Class Declarations


class-specifier:
    class-head { member-list }
class-head:
    class-key identifier base-spec
    class-key class-name base-spec
member-list:
    member-declaration member-list
    access-specifier : member-list
member-declaration:
    decl-specifiers member-declarator-list ;
    function-definition ;
    qualified-name ;
member-declarator-list:
    member-declarator
    member-declarator-list , member-declarator
member-declarator:
    declarator pure-specifier
    identifier : constant-expression
pure-specifier:
    = 0
base-spec:
    : base-list
base-list:
    base-specifier
    base-list , base-specifier
base-specifier:
    complete-class-name
    virtual access-specifier complete-class-name
    access-specifier virtual complete-class-name
access-specifier:
    private
    protected
    public
conversion-function-name:
    operator conversion-type-name
conversion-type-name:
    type-specifier-list ptr-operator
ctor-initializer:
    : mem-initializer-list
mem-initializer-list:
    mem-initializer
    mem-initializer , mem-initializer-list
mem-initializer:
    complete-class-name ( expression-list )
    identifier ( expression-list )
operator-function-name:
    operator operator
operator: one of
    new delete
    +   -   *   /   %   ^   &   |   ~
    !   =   <   >  +=   -=  *=  /=  %=
    ^=  &=  |=  <<  >>  >>= <<= ==  !=
    <=  >=  &&  ||  ++  --  ,  ->*  ->
    ()  []

### statements

statement:
    labeled-statement
    expression-statement
    compound-statement
    selection-statement
    iteration-statement
    jump-statement
    declaration-statement
labeled-statement:
    identifier : statement
    case constant-expression : statement
    default : statement
expression-statement:
    expression ;
compound-statement:
    { statement-list }
statement-list:
    statement
    statement-list statement
selection-statement:
    if ( expression ) statement
    if ( expression ) statement else statement
    switch ( expression ) statement
iteration-statement:
    while ( expression ) statement
    do statement while ( expression ) ;
    for ( for-init-statement expression ; expression ) statement
for-init-statement:
    expression-statement
    declaration-statement
jump-statement:
    break ;
    continue ;
    return expression ;
    goto identifier ;
declaration-statement:
    declaration


### Preprocessor

#define identifier token-string
#define identifier ( identifier , ... , identifier ) token-string

#include "filename"
#include <filename>

#line constant "filename"
#undef identifier

conditional:
    if-part elif-part else-part endif-line
if-part:
    if-line text
if-line:
    # if constant-expression
    # ifdef identifier
    # ifndef identifier
elif-parts:
    elif-line text
    elif-parts elif-line text
elif-line:
    # elif constant-expression
else-part:
    else-line text
else-line:
    # else
endif-line:
    # endif


### template

template-declaration:
    template < template-argument-list > declaration
template-argument-list:
    template-argument
    template-argument-list , template argument
template-argument:
    type-argument
    argument-declaration
type-argument:
    class identifier
template-class-name:
    template-name < template-arg-list >
template-arg-list:
    template-arg
    template-arg-list , template-arg
template-arg:
    expression
    type-name

### Exception Handling

try-block:
    try compound-statement handler-list
handler-list:
    handler handler-list
handler:
    catch ( exception-declaration ) compound-statement
exception-declaration:
    type-specifier-list declarator
    type-specifier-list abstract-declarator
    type-specifier-list
    ...
throw-expression:
    throw expression
exception-specification:
    throw ( type-list )
type-list:
    type-name
    type-list , type-name